/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: hello.proto */

#ifndef PROTOBUF_C_hello_2eproto__INCLUDED
#define PROTOBUF_C_hello_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Hello__HelloRequest Hello__HelloRequest;
typedef struct _Hello__HelloResponse Hello__HelloResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * HelloRequest 请求结构
 */
struct  _Hello__HelloRequest
{
  ProtobufCMessage base;
  char *name;
};
#define HELLO__HELLO_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hello__hello_request__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * HelloResponse 响应结构
 */
struct  _Hello__HelloResponse
{
  ProtobufCMessage base;
  char *message;
};
#define HELLO__HELLO_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hello__hello_response__descriptor) \
    , (char *)protobuf_c_empty_string }


/* Hello__HelloRequest methods */
void   hello__hello_request__init
                     (Hello__HelloRequest         *message);
size_t hello__hello_request__get_packed_size
                     (const Hello__HelloRequest   *message);
size_t hello__hello_request__pack
                     (const Hello__HelloRequest   *message,
                      uint8_t             *out);
size_t hello__hello_request__pack_to_buffer
                     (const Hello__HelloRequest   *message,
                      ProtobufCBuffer     *buffer);
Hello__HelloRequest *
       hello__hello_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hello__hello_request__free_unpacked
                     (Hello__HelloRequest *message,
                      ProtobufCAllocator *allocator);
/* Hello__HelloResponse methods */
void   hello__hello_response__init
                     (Hello__HelloResponse         *message);
size_t hello__hello_response__get_packed_size
                     (const Hello__HelloResponse   *message);
size_t hello__hello_response__pack
                     (const Hello__HelloResponse   *message,
                      uint8_t             *out);
size_t hello__hello_response__pack_to_buffer
                     (const Hello__HelloResponse   *message,
                      ProtobufCBuffer     *buffer);
Hello__HelloResponse *
       hello__hello_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hello__hello_response__free_unpacked
                     (Hello__HelloResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Hello__HelloRequest_Closure)
                 (const Hello__HelloRequest *message,
                  void *closure_data);
typedef void (*Hello__HelloResponse_Closure)
                 (const Hello__HelloResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Hello__Hello_Service Hello__Hello_Service;
struct _Hello__Hello_Service
{
  ProtobufCService base;
  void (*say_hello)(Hello__Hello_Service *service,
                    const Hello__HelloRequest *input,
                    Hello__HelloResponse_Closure closure,
                    void *closure_data);
};
typedef void (*Hello__Hello_ServiceDestroy)(Hello__Hello_Service *);
void hello__hello__init (Hello__Hello_Service *service,
                         Hello__Hello_ServiceDestroy destroy);
#define HELLO__HELLO__BASE_INIT \
    { &hello__hello__descriptor, protobuf_c_service_invoke_internal, NULL }
#define HELLO__HELLO__INIT(function_prefix__) \
    { HELLO__HELLO__BASE_INIT,\
      function_prefix__ ## say_hello  }
void hello__hello__say_hello(ProtobufCService *service,
                             const Hello__HelloRequest *input,
                             Hello__HelloResponse_Closure closure,
                             void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor hello__hello_request__descriptor;
extern const ProtobufCMessageDescriptor hello__hello_response__descriptor;
extern const ProtobufCServiceDescriptor hello__hello__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_hello_2eproto__INCLUDED */
